INDUS Log

Old logs (2004-2005) are in two notebooks (hand writing)

2004-06-14:
* Setup the sourceforge INDUS project


2006-06-15
* Mapping panel: focus on correponding terms and connectors when select a mapping rule

2006-06-18
* change the query engine translation rules: SQLQueryTranslator.translateAtomWhere()

2006-06-19
* Improve scaleability of reading/writing a datatype
  (it takes 1-2 minutes to r/w an ontology of 3k terms now) 
  ** DataType.toText()
  ** SimpleDataType.fromText()
  ** SimpleDataType.toText()
  
  Change TypedTree
  
  ** TypedTree.fromStream()
  ** TypedTree.fromString()
  ** TypedTree.fromStream() - change
  ** TypedTree.toStream()
  ** TypedTree.toText(TypedNode node)
  ** TypedTree.testToFromText()
  
  Change AVH
  
  ** AVH.toText()
  ** AVH.fromText()
  ** AVH.getSize()
  ** AVHText.testToFromXML()
  ** AVHText.testToFromText()
  
  AVHTest
  
  Load and save  
  ** Configable.fromText()
  ** Configable.toText()
  ** Add this two methods to all subclasses of Configable
  ** InfoWriter.write
  ** InforReader.readDataType
  ** InforReader.readDataTypeNativePlain
  
  compress/depress: cgi can not accpet mutliple lines

Comparsion
  
XML reading time: 0.031 second(s)
XML parsing time: 61.86 second(s) or 1 minute(s) 1 second(s)
Tree Size 1963
Text reading time: 0.015 second(s)
Text parsing time: 0.078 second(s)
Tree Size 1963
End of test
  
2006-06-20

	new utility class : Zip
	The Encode() and Decode() methods in Config only work with 
	    short strings
	    
	Change the ontology storage to database    
  
2006-06-21

	Fix bugs in query translation
	* redundant '()' e.g. '((A > 1))' 
	* empty clause e.g. 'A > 1 AND ()'
	* orphan clause: (AND (A>1)) => A>1

===================================================================

	Improve the scaleability of mapping and query 
	
	1. measure the memory requirement for mappings
	
	Measure by serialization
	* new class Serialization
	* new class MappingTest
	      an OntologyMapping object with 200k rules has 
	      serialization space requirement: 8706163(8.303 MB)
	      
	      1k - 37.854 KB
	      10k - 389.378 KB
	      100k - 4.046 MB
	      1M - 42.047 MB

2006-06-22
	
	new class InMemoryOntologyMapping (was OntologyMapping)
	          DbOntologyMapping 
	          OntologyMapping - as super class of the above two
	          
	In memory search : (worst) time used 
 	     size of mapping v.s.  tiem (seconds)
	            1				0
	            10				0
				100				0
				1000			0
				10000			0.015
				100000			0.047
				1000000			0.078
				10000000		0.203  

    Improved EC iterator: the whole EC database  (4546 ontology terms, 4931 database items)
        ECIterator
    
    Import type from plain text: TypePanelAction.onImportText()
    
    Fix bug in DB2Tree    
    
    to do : import scop ontology
    
2006-06-23

	load scop ontology    
    
2006-06-24

	Fix bug in deleting type 
	Change spli panel in mapping panel to vertical splitting    
	
	Greatly improved AVH loading from database template: 
	   for SCOP (83k terms), the loading time is reduced from > 12 hours
	   to just 60+ seconds!
	See DB2Tree
	
2006-06-25

	Fix bug in JTreeEx.getPath: stop at root node
	
	Split MappingPanelAction (900+ lines) to 
	      MappingPanelReadingActions and
	      MappingPanelWritingActions	   
	   
2006-06-26

    AVHTest.compareStroageSize()
    
    Compare storage size between zipped plain text and zipped binary
            conclusion: zipped plain text is better
       
       Test sample: scop ontology (83k terms) 
       Plain text        6,554,321
       Zipped plain text 1,084,605 (smallest)
       Binary            7,155,838
       Zipped binary     1,313,176	   
  